@page "/Driver-Dashboard"
@inject IConfiguration _config
@inject NavigationManager NavigationManager
@inject User Usr

<link href="css/DriverDashboard.css" rel="stylesheet" />

<div class="page">
    <div class="DriverDashboard">
        <div class="Header">
            <div class="LogoContainer">
                <a href=""><img class="logo" src="/Assets/RestaurantList/EasyMealLogo.svg" alt="EasyMeal" /></a>
            </div>
            @if (Usr.userID == 0)
            {
                <div class="FlexContainer SignUpLogIn">
                    <div class="flexChild SignIn"><a id="accountSignIn" href="/Account-Login">Log In</a></div>
                    <div class="flexChild SignUp"><a id="accountSignUp" href="/Account-Creation">Sign Up</a></div>
                </div>
            }
            else
            {
                <div class="FlexContainer SignUpLogIn">
                    <button class="SignOut" @onclick="Usr.logOut">Sign Out</button>
                </div>
            }
        </div>
        <div class="DriverInfoAndOrderQueueContainer">
            <div class="YourInfoContainer">
                <h1 class="YourInfo">Your Information:</h1><br />
                <h2 class="DriverName">@Usr.UserFirstName @Usr.UserLastName</h2><br />
                <h2 class="DriverVehicle">@Usr.Color @Usr.Make @Usr.Model</h2>
            </div>
            <div class="OrderQueueContainer">
                <table class="OrderQueueTable">
                    <tr>
                        <th>Restaurant Name</th>
                        <th>Prep Time</th>
                    </tr>
                    @for (int i = 0; i < theData.listOfIDs.Count; i++)
                    {
                        <tr>
                            <td>@theData.listOfRestNames[i]</td>
                            <td>@theData.listOfStatus[i]</td>
                        </tr>
                    }
                </table>
            </div>
        </div>
        <div class="OrderInfoContainer">
            <div class="OrderInfo">
                <h1>Order Information:</h1><br />
                <h2>Restaurant Name:</h2>
                <p>Food Place</p>
                <h2>Restaurant Address:</h2>
                <p>123 Food Ave</p>
                <h2>Customer Name:</h2>
                <p>Johnny Vins</p>
                <h2>Customer Address:</h2>
                <p>123 Couch Lane:</p>
                <h2>Order Number:</h2>
                <p>Order #: 12345</p>
                <h2>Prep Time:</h2>
                <p>55 minutes</p>
            </div>
            <div class="OrderStatusContainer">
                <label class="StatusLabel" for="status">Select a status to keep the customer informed!</label><br />
                <select name="status" id="status">
                    <option value="onWay">On the way to the restaurant!</option>
                    <option value="pickedUp">Order has been picked up!</option>
                    <option value="delivered">Order has been delivered, enjoy!</option>
                </select>
            </div>
        </div>
    </div>
</div>

@code {
    private string mySetting;
    DataUploadModel theData = new DataUploadModel();


    // on load -> call this func
    private void initMethod()
    {
        mySetting = _config.GetValue<string>("MySetting"); //on load get hidden connection string from appsettings.json
        theData.connect = mySetting;
        theData.getOrders();
    }

    // on load
    protected override async Task OnInitializedAsync()
    {
        initMethod();
    }
}
