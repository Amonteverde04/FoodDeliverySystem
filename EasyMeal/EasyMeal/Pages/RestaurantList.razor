@page "/Restaurant-List"
@inject IConfiguration _config
@inject NavigationManager NavigationManager
@inject User Usr
@inject IJSRuntime JS


<link href="css/RestaurantList.css" rel="stylesheet" />

<div class="page">
    <div class="RestuarantList">
        <div class="Header">
            <div class="Search">
                <form class="SearchForm" action="/Restaurant-List">
                    <button class="Glass" type="button">
                        <img class="SearchGlassSvg" src="/Assets/RestaurantList/SearchGlass.svg" />
                    </button>
                    <input class="SearchBar" type="text" placeholder="Search" name="search">
                </form>
            </div>
            <div class="LogoContainer">
                <a href=""><img class="logo" src="/Assets/RestaurantList/EasyMealLogo.svg" alt="EasyMeal" /></a>
            </div>
            <div class="Cart">
                <a href="Shopping-cart-page"><img class="Cart" src="/Assets/RestaurantHomePage/cart.png" alt="Cart" /></a>
            </div>
            @if (Usr.userID == 0)
            {
                <div class="FlexContainer SignUpLogIn">
                    <div class="flexChild SignIn"><a id="accountSignIn" href="/Account-Login">Log In</a></div>
                    <div class="flexChild SignUp"><a id="accountSignUp" href="/Account-Creation">Sign Up</a></div>
                </div>
            }
            else
            {
                <div class="FlexContainer SignUpLogIn">
                    <button class="SignOut" @onclick="Usr.logOut">Sign Out</button>
                </div>
            }
        </div>

        <div class="SectionGridContainer">
            @for (int i = 0; i < restNameList.Count(); i++)
            {
                int index = i;
                <div class="GridItem">
                    <button class="hrefGuy" @onclick="() => select(index)">
                        <img class="RestThumbNail" src="/Assets/RestaurantList/restaurant-building.svg" alt="@restNameList[i]" />
                        <p class="RestName">@restNameList[i]</p>
                        <p class="RestType">@restTypeList[i]</p>
                        <p class="restAddress">@restLocation[i]</p>
                        <p class="restID hidden">@restIDList[i]</p>
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
        string restName = "";
        string restType = "";
        string address = "";
        string mySetting = "";
    private string restID = "";
    private DataUploadModel theData = new DataUploadModel();
    private List<string> restNameList = new List<string>();
    private List<string> restTypeList = new List<string>();
    private List<int> restIDList = new List<int>();


    private List<string>[] restAddress = new List<string>[4];
    private List<string> restStreet = new List<string>();
    private List<string> restCity = new List<string>();
    private List<string> restState = new List<string>();
    private List<string> restZip = new List<string>();
    private List<string> restLocation = new List<string>();

    public async Task select(int i)
    {
        Console.WriteLine("I am running");
        restID = await JS.InvokeAsync<string>("accessDOMElement",i);
        Usr.savedRestaurant = Int32.Parse(restID);
        Console.WriteLine(Usr.savedRestaurant);
        Console.WriteLine("done");
        NavigationManager.NavigateTo("/Restaurant-Home-page");
    }

    private void consolidateAddress()
    {
        string theString = "";
        for(int i = 0; i < restStreet.Count; i++)
        {
            theString = restStreet[i] + " ";
            theString = restStreet[i] + " " + restCity[i] + " " + restState[i] + " " + restZip[i];
            restLocation.Add(theString);
        }
    }

    // on load -> call this func
    private void initMethod()
    {
        mySetting = _config.GetValue<string>("MySetting"); //on load get hidden connection string from appsettings.json
        theData.connect = mySetting;
        restNameList = theData.getAllRestaurantNames();
        restTypeList = theData.getAllRestaurantTypes();
        restAddress = theData.getAllRestaurantAddress();
        restStreet = restAddress[0];
        restCity = restAddress[1];
        restState = restAddress[2];
        restZip = restAddress[3];
        consolidateAddress();
        restIDList = theData.getAllRestaurantIDs();
    }

    // on load
    protected override async Task OnInitializedAsync()
    {
        initMethod();
    }
}
