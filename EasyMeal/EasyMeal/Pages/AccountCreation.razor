@page "/Account-Creation"
@inject IConfiguration _config

<div class="MainContainer">
    <div class="LogoContainer">
        <a href=""><img class="logo" src="/Assets/Logo.svg" alt="EasyMeal" /></a>
    </div>

    <div class="UserTypeSelectorContainer">
        <ul class="ButtonListContainer">
            <li><button type="button" class="customerButton" @onmousedown="@onMouseClickCustomer" id="@idNameCustomer">I want to order food</button></li>
            <li><button type="button" class="driverButton" @onmousedown="@onMouseClickDriver" id="@idNameDriver">I want to deliver food</button></li>
            <li><button type="button" class="restaurantButton" @onmousedown="@onMouseClickRestaurant" id="@idNameRestaurant">I represent a restaurant</button></li>
        </ul>
    </div>

    <div class="AccountFieldsContainer">
        <h1 id="createAcc">Create an account.</h1>
        <form class="AccountFieldsForm">
            <div class="FirstNameContainer">
                <label id="firstName">First Name</label> <br />
                <input type="text" @bind-value="firstName" class="FirstNameInput" required />
            </div>
            <div class="LastNameContainer">
                <label id="lastName">Last Name</label> <br />
                <input type="text" @bind-value="lastName" class="LastNameInput" required />
            </div>
            @if (@idNameCustomer == "buttonActive" || idNameDriver == "buttonActive")
            {
                <div class="EmailPhonePassContainer">
                    <label id="emailAddress">Email Address</label> <br />
                    <input type="email" @bind-value="email" class="EmailInput" required /> <br />

                    <label id="phoneNumber">Phone Number</label> <br />
                    <input type="number" @bind-value="phone" class="PhoneNumberInput" required /> <br />

                    <label id="password">Password</label> <br />
                    <input type="password" @bind-value="password" class="PassWordInput" minlength="8" maxlength="16" required />
                </div>
            }
            @if (@idNameRestaurant == "buttonActive")
            {
                <div class="EmailPhonePassContainer">
                    <label id="restaurantName">Restaurant Name</label> <br />
                    <input type="text" @bind-value="restaurantName" class="RestaurantNameInput" required /> <br />

                    <label id="emailAddress">Email Address</label> <br />
                    <input type="email" @bind-value="email" class="EmailInput" required /> <br />

                    <label id="password">Password</label> <br />
                    <input type="password" @bind-value="password" class="PassWordInput" minlength="8" maxlength="16" required />
                </div>
            }
            <div class="FormSubmitButtonContainer">
                <button type="submit" class="FormSubmitButton" @onclick="submitFields">Create Account</button>
            </div>
            <p id="HaveAccountText">Already a member? &nbsp&nbsp<a href="">Sign In</a></p>
        </form>
    </div>

</div>

@code {

    public string idNameCustomer { get; set; }

    public string idNameDriver { get; set; }

    public string idNameRestaurant { get; set; }

    private string firstName { get; set; }

    private string lastName { get; set; }

    private string email { get; set; }

    private string phone { get; set; }

    private string password { get; set; }

    private string restaurantName { get; set; }

    // will hold connection string
    private string mySetting = "";

    // form input logic
    private void submitFields()
    {
        SqlConnection con = new SqlConnection(mySetting);
        //when decrypting use Encrypt.hashString(password)

        if (idNameCustomer == "buttonActive")
        {
            SqlCommand cmd = new SqlCommand("INSERT INTO Customertest(FirstName, LastName, CustomerEail, PhoneNumber, Password) VALUES (@firstName, @lastName, @email, @phone, @password)", con);
            con.Open();
            cmd.Parameters.AddWithValue("@firstName", firstName);
            cmd.Parameters.AddWithValue("@lastName", lastName);
            cmd.Parameters.AddWithValue("@email", email);
            cmd.Parameters.AddWithValue("@phone", phone);
            cmd.Parameters.AddWithValue("@password", Encrypt.hashString(password));
            int check = cmd.ExecuteNonQuery();
            if (check != 0)
            {
                Console.WriteLine("Account created!");
            }
            else
            {
                Console.WriteLine("Error, account not created!");
            }
            con.Dispose();
        }
        else if (idNameDriver == "buttonActive")
        {
            SqlCommand cmd = new SqlCommand("INSERT INTO DriverTable(FirstName, LastName, DriverEmail, PhoneNumber, Password) VALUES (@firstName, @lastName, @email, @phone, @password)", con);
            con.Open();
            cmd.Parameters.AddWithValue("@firstName", firstName);
            cmd.Parameters.AddWithValue("@lastName", lastName);
            cmd.Parameters.AddWithValue("@email", email);
            cmd.Parameters.AddWithValue("@phone", phone);
            cmd.Parameters.AddWithValue("@password", Encrypt.hashString(password));
            int check = cmd.ExecuteNonQuery();
            if (check != 0)
            {
                Console.WriteLine("Account created!");
            }
            else
            {
                Console.WriteLine("Error, account not created!");
            }
            con.Dispose();

        }
        else if (idNameRestaurant == "buttonActive")
        {
            SqlCommand cmd = new SqlCommand("INSERT INTO RestaurantTable(FirstName, LastName, RestaurantName, RestaurantEmail, Password) VALUES (@firstName, @lastName, @restaurantName, @restaurantEmail, @password)", con);
            con.Open();
            cmd.Parameters.AddWithValue("@firstName", firstName);
            cmd.Parameters.AddWithValue("@lastName", lastName);
            cmd.Parameters.AddWithValue("@restaurantName", restaurantName);
            cmd.Parameters.AddWithValue("@restaurantEmail", email);
            cmd.Parameters.AddWithValue("@password", Encrypt.hashString(password));
            int check = cmd.ExecuteNonQuery();
            if (check != 0)
            {
                Console.WriteLine("Account created!");
            }
            else
            {
                Console.WriteLine("Error, account not created!");
            }
            con.Dispose();
        }
    }

    // on load -> call this func
    private void initMethod()
    {
        idNameCustomer = "buttonActive";
        mySetting = _config.GetValue<string>("MySetting"); //on load get hidden connection string from appsettings.json
    }


    // user type button logic
    protected void onMouseClickCustomer(MouseEventArgs mouseEventArgs)
    {
        idNameDriver = string.Empty;
        idNameRestaurant = string.Empty;
        idNameCustomer = "buttonActive";
    }

    protected void onMouseClickDriver(MouseEventArgs mouseEventArgs)
    {
        idNameCustomer = string.Empty;
        idNameRestaurant = string.Empty;
        idNameDriver = "buttonActive";
    }

    protected void onMouseClickRestaurant(MouseEventArgs mouseEventArgs)
    {
        idNameDriver = string.Empty;
        idNameCustomer = string.Empty;
        idNameRestaurant = "buttonActive";
    }

    // on load
    protected override async Task OnInitializedAsync()
    {
        // When page loads up, make sure customer is the primary selected button
        initMethod();
    }
}