@page "/Shopping-cart-page"
@inject User Usr
@inject IConfiguration _config
@inject NavigationManager NavigationManager

<link href="css/ShoppingCartPage.css" rel="stylesheet" />

<div class="page">
    <div class="RestuarantList">
        <div class="Header">
            <div class="Search">
                <form class="SearchForm" action="/Restaurant-List">
                    <button class="Glass" type="button">
                        <img class="SearchGlassSvg" src="/Assets/RestaurantList/SearchGlass.svg" />
                    </button>
                    <input class="SearchBar" type="text" placeholder="Search" name="search">
                </form>
            </div>
            <div class="LogoContainer">
                <a href=""><img class="logo" src="/Assets/RestaurantHomePage/EasyMealLogo.svg" alt="EasyMeal" /></a>
            </div>
            <div class="Cart">
                <a href="Shopping-cart-page"><img class="Cart" src="/Assets/RestaurantHomePage/cart.png" alt="Cart" /></a>
            </div>
            @if (Usr.userID == 0)
            {
                <div class="FlexContainer SignUpLogIn">
                    <div class="flexChild SignIn"><a id="accountSignIn" href="/Account-Login">Log In</a></div>
                    <div class="flexChild SignUp"><a id="accountSignUp" href="/Account-Creation">Sign Up</a></div>
                </div>
            }
            else
            {
                <div class="FlexContainer SignUpLogIn">
                    <button class="SignOut" @onclick="Usr.logOut">Sign Out</button>
                </div>
            }
        </div>
        <div class="InfoSec">
            @if (failure == 2)
            {
                <div class="SuccessContainer">
                    <div class="SuccessMessageContainer">
                        <div class="SuccessMessage">
                            <img class="SuccessIcon" src="/Assets/RestaurantHomePage/checkMark.svg" />
                            <h3 id="SuccessHeading">Success!</h3>
                            <p id="SuccessText">Order placed!</p>
                        </div>
                    </div>
                </div>
            }
            <h1 class="RestHeader">Shopping Cart</h1>
            <table class="Container">
                <tr>
                    <th>Item</th>
                    <th>Price</th>
                    <th>Remove Item</th>
                </tr>
                @for (int i = 0; i < Usr.cartItemsByName.Count(); i++)
                {
                    string j = Usr.cartItemsById[i];
                    string k = Usr.cartItemsByName[i];
                    decimal q = Usr.cartItemsByPrice[i];
                    <tr>
                        <td>@Usr.cartItemsByName[i]</td>
                        <td>@Usr.cartItemsByPrice[i]</td>
                        <td class="RemoveItemButtonContainer"><button class="RemoveItemButton" @onclick="()=>removeFromCart(j,k,q)"><img class="Minus" src="/Assets/ShoppingCartPage/minus.svg" alt="" /></button></td>
                    </tr>
                }
            </table>
            <div class="TotalContainer">
                <h2>Total: </h2>
            </div>
            <div class="OrderButtonContainer">
                <button class="OrderButton" @onclick="submitOrder">Place Order</button>
            </div>
        </div>



    </div>
</div>

@code {
    private int numOfItems = 0;
    private string mySetting = "";

    private string category = "";
    private string itemName = "";
    private string itemDesc = "";
    private string price = "";
    private string prepTime = "";
    private int failure = 5;

    DataUploadModel theModel = new DataUploadModel();

    private void sendData()
    {
        theModel.category = category;
        theModel.itemName = itemName;
        theModel.itemDesc = itemDesc;
        theModel.price = price;
        theModel.time = prepTime;
        theModel.uploadItems();
        failure = theModel.failure;
    }

    private void removeFromCart(string j, string k, decimal q)
    {
        Usr.cartItemsById.Remove(j);
        Usr.cartItemsByName.Remove(k);
        Usr.cartItemsByPrice.Remove(q);
    }

    private void submitOrder()
    {
        failure = 2;
        int checker = 0;
        checker = Usr.sendOrder();
        if(checker == 1)
        {
            Usr.cartItemsById.Clear();
            Usr.cartItemsByName.Clear();
            Usr.cartItemsByPrice.Clear();
        } else { 
        }
    }

    // on load -> call this func
    private void initMethod()
    {
        mySetting = _config.GetValue<string>("MySetting"); //on load get hidden connection string from appsettings.json
        Usr.connect = mySetting;
        Usr.grabUserType();
        theModel.connect = mySetting;
        if (Usr.userType == 3)
        {
            theModel.userID = Usr.userID;
            theModel.grabRestID();
        }
        else
        {
            // need to make method to get the items from their respective columns in tblMenuItems
        }
    }

    // on load
    protected override async Task OnInitializedAsync()
    {
        initMethod();
    }
}

